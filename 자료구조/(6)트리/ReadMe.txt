트리구조란?
나무를 거꾸로 뒤집어 놓은 형태

포화이진트리 : 모든 노드가 완전하게 채워진 상태 높이가 h라고 가정하면 2^h-1개의 노드가 존재
완전이진트리 : 마지막 레벨을 제외한 모든 레벨이 가득 차있으며, 마지막 레벨의 노드는 왼쪽부터 차있다
일반이진트리 : 각 노드가 최대 두 개의 자식을 가질 수 있는 트리로, 특정한 구조적 제약 없이 자유롭게 구성
편향이진트리 : 한쪽으로만 구성된 노드

힙(heap)
완전이진트리의 일종으로 우선순위 큐(queue)를 위하여 만들어진 자료구조
여러 개의 값들 중에서 최댓값이나 최솟값을 빠르게 찾아내도록 만들어진 자료구조
일종의 반정렬상태(느슨한 정렬 상태)를 유지 -> 큰 값이 상위 레벨에 있고 작은 값이 하위 레벨에 위치
중복된 값을 허용

최대 힙:부모노드>=자식노드       최소 힙:부모노드<=자식노드

힙 삽입
1.새로운 노드를 힙의 마지막 노드에 삽입
2.새로운 노드의 위치를 이동

힙 삭제
1.삭제된 노드(최대힙에서 루트노드)에 마지막 노드를 가져옴
2.이동된 노드 기준으로 힙을 재구성

이진트리 생성(높이가 2이고 데이터가 6개인 완전 이진트리)
1.루트 노드 생성
2.두번째 노드를 생성하고 루트 노드의 왼쪽 노드로 지정
3.세번째 노드를 생성하고 루트 노드의 오른쪽 노드로 지정
4.네번째부터 여섯 번째까지 노드를 생성하고 부모 노드와 연결

전위 순회
1.현재 노드 데이터 처리
2.왼쪽 서브 트리로 이동
3.오른쪽 서브 트리로 이동

중위 순회
1.왼쪽 서브 트리로 이동
2.현재 노드 데이터 처리
3.오른쪽 서브 트리로 이동

후위 순회
1.왼쪽 서브 트리로 이동
2.오른쪽 서브 트리로 이동
3.현재 노드 데이터 처리

전위 순회 작동
1.현재 데이터 처리 후 왼쪽 서브트리로 이동
2.이동한 왼쪽 서브 트리의 데이터 를 처리 후 다시 왼쪽 서브트리로 이동
3.이동한 왼쪽 서브트리의 데이터를 처리 후 왼쪽으로 이동 -> 이때 왼쪽 자식트리가 없으면 오른 쪽 자식트리 이동 둘 다 없으면 처리 완료
4.이동한 트리에 처리가 완료 됐으므로 앞 노드로 올라가서 오른쪽 서브트리로 이동
5.이동한 오른쪽 서브트리의 데이터를 처리하고 다시 왼쪽 자식 서브트리로 이동
6.왼쪽 자식의 데이터를 처리 후 왼쪽으로 이동 없으면 오른쪽 이동 둘 다 None일 시 모든 노드 순회 완료

이진 탐색 트리의 특징
1.왼쪽 서브트리는 루트 노드보다 모두 작은 값을 가진다
2.오른쪽 서브 트리는 노드보다 모두 큰 값을 가진다
3.각 서브트리1,2특징을 갖는다
4.모든 노드 값은 중복되지 않는다.즉,중복된 이진 탐색 트리에 저장할 수 없다

이진 탐색 트리에서 데이터 검색
1.찾고자 하는 데이터를 루트 노드와 비교해 데이터보다 작아서 왼쪽으로 이동
2.찾고자 하는 데이터를 왼쪽 서브트리와 비교 후 서브트리보다 크다면 서브트리의 오른쪽으로 이동
3.오른쪽 서브트리에서도 동일하게 처리

이진 탐색 트리에서 데이터 삭제
리프노드의 데이터를 삭제 할 경우 -> 부모 노드의 링크에 None대입
자식 노드가 하나인 노드를 삭제하는 경우 -> 부모 노드 링크에 서브의 자식 노드를 대입
자식 노드가 둘 인 경우 -> 삭제할 node의 오른쪽 자식 중 가장 작은 값으로 대체(parent node와 연결) or 삭제할 노드의 왼쪽 자식 중, 가장 큰 값으로 대체